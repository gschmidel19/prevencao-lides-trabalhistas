
import pandas as pd
import plotly.express as px
import streamlit as st

st.set_page_config(page_title='An√°lise de Lides Trabalhistas', layout='wide')

@st.cache_data
def carregar_dados():
    return pd.read_csv('lides_trabalhistas_simulado.csv', parse_dates=['data_ajuizamento'])

df = carregar_dados()

st.title('üìä Painel de Lides Trabalhistas')
aba = st.sidebar.radio('Selecione a aba:', ['Vis√£o Geral', 'Recomenda√ß√µes'])

if aba == 'Vis√£o Geral':
    st.subheader('Distribui√ß√£o por Estado')
    fig_estado = px.histogram(df, x='estado', color='procedente', barmode='group', title='A√ß√µes por Estado e Resultado')
    st.plotly_chart(fig_estado, use_container_width=True)

    st.subheader('Distribui√ß√£o por Cargo')
    fig_cargo = px.histogram(df, x='cargo', color='procedente', barmode='group', title='A√ß√µes por Cargo e Resultado')
    st.plotly_chart(fig_cargo, use_container_width=True)

elif aba == 'Recomenda√ß√µes':
    st.subheader('üîç Recomenda√ß√µes Preventivas')
    cargos_risco = df[df['procedente'] == 'Sim']['cargo'].value_counts().head(5)
    st.write('Cargos com mais a√ß√µes procedentes:')
    st.table(cargos_risco)

    st.markdown('''
    ### Sugest√µes:
    - Refor√ßar treinamentos para os cargos acima.
    - Implementar canais de escuta ativa e compliance.
    - Monitorar turnos e carga hor√°ria para evitar passivos.
    - Investir em a√ß√µes de clima organizacional e feedbacks cont√≠nuos.
    ''')

    st.info('Essas recomenda√ß√µes s√£o baseadas em padr√µes observados no dataset simulado.')

